#Note: "20 number grid.txt" is a 20x20 grid of numbers. The file is included in this directory.

def get_gridlist():
    raw_numbersgrid = open("20 number grid.txt", 'r')
    gridlist = []
    for line in raw_numbersgrid:
        line_split = list(line.split(' '))
        if line_split[-1] == '\n':
            line_split[-1] = line_split[-1][:-1] #remove \n
        for i in range(len(line_split)):
            line_split[i] = int(line_split[i])
        gridlist.append(line_split)
    return gridlist
def columns_gridlist():
    columns = {}
    for i in range(0,20):
        columns[(i)] = []
    for line in gridlist:
        for i in range(0,20):
            item = (line[i])
            columns[(i)].append(item)
    columns_list = []
    for i in range(0,20):
        columns_list.append(columns[i])
    return columns_list
def find_quads(gridlist):
    quads_lr = []
    for line in gridlist:
        for index in range(0,17):
            quads_lr.append(line[index:(index+4)])
    return quads_lr
def find_quads_diagonal(gridlist):
    diag_quads_neg_slope = []
    for y in range(0,17):
        for x in range(0,17):
            q1 = gridlist[y][x]
            q2 = gridlist[y+1][x+1]
            q3 = gridlist[y+2][x+2]
            q4 = gridlist[y+3][x+3]
            diag_quads_neg_slope.append([q1,q2,q3,q4])
    diag_quads_pos_slope = []
    for y in range(1,18):
        for x in range(0,17):
            q1 = gridlist[-y][x]
            q2 = gridlist[(-y)-1][x+1]
            q3 = gridlist[(-y)-2][x+2]
            q4 = gridlist[(-y)-3][x+3]
            diag_quads_pos_slope.append([q1,q2,q3,q4])
    return (diag_quads_neg_slope + diag_quads_pos_slope)
 


gridlist = get_gridlist()
columns = columns_gridlist()
row_quads = find_quads(gridlist)
column_quads = find_quads(columns)
total_quads = []
diag_quads = find_quads_diagonal(gridlist)
total_quads += (row_quads) + (column_quads) + (diag_quads)
largest_quad = 1
for quad in total_quads:
    product = 1
    for item in quad:
        product *= item
    if product > largest_quad:
        largest_quad = product
print(largest_quad)
